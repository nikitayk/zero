{
  "$id": "zerotrace_adaptive_study_integration.json",
  "version": "2.0.0",
  "description": "Integrates CASCADE's Adaptive Study Plan features into zeroTrace AI Chrome extension while maintaining privacy-first architecture and DSA problem-solving capabilities",
  "target_project": "zeroTrace AI - Privacy-First AI Assistant Chrome Extension",
  "source_inspiration": "CASCADE - GenAI-Powered Study Companion",
  "integration_scope": [
    "Adaptive Study Planning Engine",
    "DSA-focused Learning Paths",
    "Skills Tracking for Programming",
    "Gamified Progress System",
    "Privacy-First Data Storage",
    "AI-Powered Study Recommendations"
  ],
  "privacy_compliance": {
    "data_storage": "Local chrome.storage.local only - no external servers",
    "processing": "In-memory processing with zero persistent logging",
    "ai_integration": "Uses existing zeroTrace AI models for recommendations",
    "user_consent": "Explicit opt-in for study tracking features"
  },
  "instructions": [
    "This integration adds adaptive study planning to zeroTrace AI without compromising privacy",
    "All study data remains local to the user's browser using chrome.storage.local",
    "Integrates with existing DSA solver to create coding-focused study plans",
    "Uses existing AI modes (Chat, Code, Research) to generate personalized content",
    "Maintains zeroTrace's multi-modal capabilities for diverse learning styles",
    "After applying: reload extension and access via new 'Study Plan' mode in sidebar",
    "The system adapts to user's DSA solving patterns and coding skill progression"
  ],
  "actions": [
    {
      "type": "enhanceManifestFields",
      "path": "manifest.json",
      "description": "Add permissions and update extension metadata for study planning features",
      "merge": {
        "permissions": [
          "storage",
          "alarms",
          "tabs",
          "activeTab"
        ],
        "background": {
          "service_worker": "background.js"
        },
        "web_accessible_resources": [
          {
            "resources": [
              "assets/*",
              "src/study/*"
            ],
            "matches": [
              "<all_urls>"
            ]
          }
        ]
      }
    },
    {
      "type": "writeFile",
      "path": "src/study/adaptiveEngine.js",
      "ifExists": "overwrite",
      "description": "Core adaptive study planning engine optimized for DSA learning and coding skills",
      "content": "// zeroTrace AI Adaptive Study Engine - Privacy-First Implementation\n\nexport const STUDY_CONFIG = {\n  dailyTargetMinutes: 90,\n  maxFocusSession: 45, \n  minStudyBlock: 15,\n  difficultyLevels: ['easy', 'medium', 'hard', 'expert'],\n  skillDomains: {\n    'dsa': ['arrays', 'linkedlists', 'trees', 'graphs', 'dp', 'greedy', 'backtracking'],\n    'programming': ['cpp', 'python', 'java', 'javascript'],\n    'algorithms': ['sorting', 'searching', 'optimization', 'string-algorithms'],\n    'system-design': ['scalability', 'databases', 'caching', 'load-balancing']\n  },\n  proficiencyLevels: {\n    beginner: { min: 0, max: 100, label: '\ud83c\udf31 Beginner' },\n    basic: { min: 101, max: 200, label: '\u26a1 Basic' },\n    intermediate: { min: 201, max: 300, label: '\ud83d\ude80 Intermediate' },\n    advanced: { min: 301, max: 400, label: '\ud83c\udfaf Advanced' },\n    master: { min: 401, max: 500, label: '\ud83d\udc51 Master' }\n  }\n};\n\nexport function getCurrentTimestamp() {\n  return Date.now();\n}\n\nexport function minutesToMs(minutes) {\n  return minutes * 60 * 1000;\n}\n\nexport function calculateSkillScore(skill, recentSessions = []) {\n  if (!recentSessions.length) return 50; // Default starting score\n  \n  const relevantSessions = recentSessions.filter(s => \n    s.skills?.includes(skill) || s.problemType === skill\n  );\n  \n  if (!relevantSessions.length) return 50;\n  \n  // Calculate weighted score based on recency and performance\n  const scores = relevantSessions.map(session => {\n    const recencyWeight = Math.exp(-(getCurrentTimestamp() - session.timestamp) / (24 * 60 * 60 * 1000));\n    const performanceScore = session.success ? session.difficulty * 25 : session.difficulty * 10;\n    return performanceScore * recencyWeight;\n  });\n  \n  return Math.min(500, Math.max(0, scores.reduce((a, b) => a + b, 0) / scores.length));\n}\n\nexport function identifyWeakAreas(userProfile) {\n  const { skillScores = {}, preferences = {} } = userProfile;\n  const weakSkills = [];\n  \n  Object.entries(skillScores).forEach(([skill, score]) => {\n    if (score < 150) { // Below basic level\n      weakSkills.push({ skill, score, priority: 'high' });\n    } else if (score < 250) { // Below intermediate\n      weakSkills.push({ skill, score, priority: 'medium' });\n    }\n  });\n  \n  return weakSkills.sort((a, b) => a.score - b.score);\n}\n\nexport function generateStudyPlan(userProfile, preferences = {}) {\n  const targetMinutes = preferences.dailyTarget || STUDY_CONFIG.dailyTargetMinutes;\n  const weakAreas = identifyWeakAreas(userProfile);\n  const studyBlocks = [];\n  \n  // Distribute time across weak areas and review\n  let remainingTime = targetMinutes;\n  const reviewTime = Math.min(20, targetMinutes * 0.2); // 20% for review\n  remainingTime -= reviewTime;\n  \n  // Create focused study blocks\n  weakAreas.slice(0, 3).forEach((area, index) => {\n    const blockTime = Math.min(\n      STUDY_CONFIG.maxFocusSession,\n      Math.floor(remainingTime / (weakAreas.length - index))\n    );\n    \n    if (blockTime >= STUDY_CONFIG.minStudyBlock) {\n      studyBlocks.push({\n        id: `block_${getCurrentTimestamp()}_${index}`,\n        skill: area.skill,\n        duration: blockTime,\n        difficulty: area.score < 100 ? 'easy' : area.score < 200 ? 'medium' : 'hard',\n        type: 'focused_practice',\n        resources: generateResourceSuggestions(area.skill),\n        startTime: null,\n        completed: false\n      });\n      remainingTime -= blockTime;\n    }\n  });\n  \n  // Add review block\n  if (reviewTime >= STUDY_CONFIG.minStudyBlock) {\n    studyBlocks.push({\n      id: `review_${getCurrentTimestamp()}`,\n      skill: 'mixed_review',\n      duration: reviewTime,\n      difficulty: 'mixed',\n      type: 'review',\n      resources: ['Previous problems', 'Concept revision'],\n      startTime: null,\n      completed: false\n    });\n  }\n  \n  return {\n    id: `plan_${getCurrentTimestamp()}`,\n    createdAt: getCurrentTimestamp(),\n    targetMinutes,\n    blocks: studyBlocks,\n    totalPlanned: studyBlocks.reduce((sum, block) => sum + block.duration, 0),\n    estimatedCompletion: new Date(getCurrentTimestamp() + minutesToMs(targetMinutes)).toISOString()\n  };\n}\n\nfunction generateResourceSuggestions(skill) {\n  const resourceMap = {\n    'arrays': ['Two Pointers', 'Sliding Window', 'Array Manipulation'],\n    'linkedlists': ['Fast/Slow Pointers', 'Reversal Patterns', 'Merge Techniques'],\n    'trees': ['DFS Traversal', 'BFS Traversal', 'Tree Construction'],\n    'graphs': ['Graph Traversal', 'Shortest Path', 'Topological Sort'],\n    'dp': ['1D DP', '2D DP', 'State Machines'],\n    'greedy': ['Interval Problems', 'Optimization', 'Priority Queues']\n  };\n  \n  return resourceMap[skill] || ['Practice Problems', 'Concept Review'];\n}\n\nexport function updateUserProgress(userProfile, sessionData) {\n  const updatedProfile = { ...userProfile };\n  const { skill, success, difficulty, timeSpent, problemsSolved } = sessionData;\n  \n  // Update skill scores\n  if (!updatedProfile.skillScores) updatedProfile.skillScores = {};\n  const currentScore = updatedProfile.skillScores[skill] || 50;\n  const improvement = success ? difficulty * 5 + Math.min(10, problemsSolved * 2) : -5;\n  updatedProfile.skillScores[skill] = Math.max(0, Math.min(500, currentScore + improvement));\n  \n  // Update session history\n  if (!updatedProfile.sessionHistory) updatedProfile.sessionHistory = [];\n  updatedProfile.sessionHistory.push({\n    ...sessionData,\n    timestamp: getCurrentTimestamp()\n  });\n  \n  // Keep only last 50 sessions for privacy\n  updatedProfile.sessionHistory = updatedProfile.sessionHistory.slice(-50);\n  \n  // Update statistics\n  if (!updatedProfile.stats) updatedProfile.stats = {};\n  updatedProfile.stats.totalStudyTime = (updatedProfile.stats.totalStudyTime || 0) + timeSpent;\n  updatedProfile.stats.problemsSolved = (updatedProfile.stats.problemsSolved || 0) + problemsSolved;\n  updatedProfile.stats.lastActive = getCurrentTimestamp();\n  \n  return updatedProfile;\n}\n\nexport function getNextRecommendation(userProfile) {\n  const weakAreas = identifyWeakAreas(userProfile);\n  if (!weakAreas.length) {\n    return {\n      type: 'maintenance',\n      message: 'Great progress! Try some advanced problems or explore new topics.',\n      suggestedSkill: 'system-design',\n      difficulty: 'hard'\n    };\n  }\n  \n  const topWeakArea = weakAreas[0];\n  return {\n    type: 'improvement',\n    message: `Focus on ${topWeakArea.skill} - your weakest area currently.`,\n    suggestedSkill: topWeakArea.skill,\n    difficulty: topWeakArea.score < 100 ? 'easy' : 'medium',\n    estimatedTime: 25\n  };\n}\n\n// Privacy-first utilities\nexport function sanitizeUserData(userData) {\n  // Remove any potentially identifying information while keeping learning data\n  const sanitized = { ...userData };\n  delete sanitized.email;\n  delete sanitized.name; \n  delete sanitized.deviceInfo;\n  return sanitized;\n}\n\nexport function compressSessionHistory(sessions) {\n  // Compress old session data to save storage space while preserving learning insights\n  return sessions.map(session => ({\n    skill: session.skill,\n    success: session.success,\n    difficulty: session.difficulty,\n    timestamp: session.timestamp\n  }));\n}\n"
    },
    {
      "type": "writeFile",
      "path": "src/study/studyStorage.js",
      "ifExists": "overwrite",
      "description": "Privacy-first storage manager for study data using chrome.storage.local",
      "content": "// zeroTrace AI Study Storage - Privacy-First Local Storage\n\nconst STORAGE_KEYS = {\n  userProfile: 'zt_study_profile',\n  studyPlan: 'zt_current_plan', \n  preferences: 'zt_study_preferences',\n  achievements: 'zt_achievements',\n  dailyStats: 'zt_daily_stats'\n};\n\n// Storage utilities with privacy safeguards\nexport async function getStorageItem(key) {\n  return new Promise(resolve => {\n    chrome.storage.local.get([key], result => {\n      resolve(result[key] || null);\n    });\n  });\n}\n\nexport async function setStorageItem(key, value) {\n  return new Promise(resolve => {\n    chrome.storage.local.set({ [key]: value }, () => {\n      resolve(true);\n    });\n  });\n}\n\nexport async function removeStorageItem(key) {\n  return new Promise(resolve => {\n    chrome.storage.local.remove([key], () => {\n      resolve(true);\n    });\n  });\n}\n\n// User Profile Management\nexport async function getUserProfile() {\n  const profile = await getStorageItem(STORAGE_KEYS.userProfile);\n  return profile || createDefaultProfile();\n}\n\nexport async function updateUserProfile(profileData) {\n  const currentProfile = await getUserProfile();\n  const updatedProfile = {\n    ...currentProfile,\n    ...profileData,\n    lastUpdated: Date.now()\n  };\n  \n  await setStorageItem(STORAGE_KEYS.userProfile, updatedProfile);\n  return updatedProfile;\n}\n\nfunction createDefaultProfile() {\n  return {\n    id: `user_${Date.now()}`,\n    createdAt: Date.now(),\n    skillScores: {},\n    sessionHistory: [],\n    preferences: {\n      dailyTarget: 90,\n      preferredDifficulty: 'medium',\n      focusAreas: ['dsa'],\n      reminderEnabled: true\n    },\n    stats: {\n      totalStudyTime: 0,\n      problemsSolved: 0,\n      streak: 0,\n      longestStreak: 0\n    },\n    achievements: [],\n    level: 1,\n    experience: 0\n  };\n}\n\n// Study Plan Management  \nexport async function getCurrentStudyPlan() {\n  return await getStorageItem(STORAGE_KEYS.studyPlan);\n}\n\nexport async function saveStudyPlan(plan) {\n  await setStorageItem(STORAGE_KEYS.studyPlan, plan);\n  return plan;\n}\n\nexport async function updateStudyBlock(blockId, updateData) {\n  const currentPlan = await getCurrentStudyPlan();\n  if (!currentPlan) return null;\n  \n  const blockIndex = currentPlan.blocks.findIndex(b => b.id === blockId);\n  if (blockIndex === -1) return currentPlan;\n  \n  currentPlan.blocks[blockIndex] = {\n    ...currentPlan.blocks[blockIndex],\n    ...updateData,\n    lastUpdated: Date.now()\n  };\n  \n  await saveStudyPlan(currentPlan);\n  return currentPlan;\n}\n\n// Progress Tracking\nexport async function recordStudySession(sessionData) {\n  const profile = await getUserProfile();\n  const updatedProfile = {\n    ...profile,\n    sessionHistory: [\n      ...profile.sessionHistory.slice(-49), // Keep last 49 + new one = 50 max\n      {\n        ...sessionData,\n        id: `session_${Date.now()}`,\n        timestamp: Date.now()\n      }\n    ]\n  };\n  \n  // Update stats\n  updatedProfile.stats.totalStudyTime += sessionData.duration || 0;\n  updatedProfile.stats.problemsSolved += sessionData.problemsCompleted || 0;\n  updatedProfile.stats.lastActive = Date.now();\n  \n  // Update streak\n  const today = new Date().toDateString();\n  const lastActiveDate = new Date(profile.stats.lastActive || 0).toDateString();\n  \n  if (today !== lastActiveDate) {\n    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();\n    if (lastActiveDate === yesterday) {\n      updatedProfile.stats.streak = (updatedProfile.stats.streak || 0) + 1;\n    } else {\n      updatedProfile.stats.streak = 1;\n    }\n    updatedProfile.stats.longestStreak = Math.max(\n      updatedProfile.stats.longestStreak || 0,\n      updatedProfile.stats.streak\n    );\n  }\n  \n  await setStorageItem(STORAGE_KEYS.userProfile, updatedProfile);\n  return updatedProfile;\n}\n\n// Achievements System\nexport async function checkAndAwardAchievements(userProfile) {\n  const currentAchievements = userProfile.achievements || [];\n  const newAchievements = [];\n  \n  const achievementChecks = [\n    {\n      id: 'first_problem',\n      name: 'First Steps',\n      description: 'Solved your first problem',\n      condition: () => userProfile.stats.problemsSolved >= 1,\n      icon: '\ud83c\udfaf'\n    },\n    {\n      id: 'streak_week',\n      name: 'Weekly Warrior', \n      description: 'Maintained a 7-day streak',\n      condition: () => userProfile.stats.streak >= 7,\n      icon: '\ud83d\udd25'\n    },\n    {\n      id: 'hundred_problems',\n      name: 'Centurion',\n      description: 'Solved 100 problems',\n      condition: () => userProfile.stats.problemsSolved >= 100,\n      icon: '\ud83d\udcaf'\n    },\n    {\n      id: 'dsa_master',\n      name: 'DSA Master',\n      description: 'Reached advanced level in any DSA topic',\n      condition: () => Object.values(userProfile.skillScores || {}).some(score => score >= 301),\n      icon: '\ud83d\udc51'\n    }\n  ];\n  \n  for (const achievement of achievementChecks) {\n    if (!currentAchievements.some(a => a.id === achievement.id) && achievement.condition()) {\n      newAchievements.push({\n        ...achievement,\n        earnedAt: Date.now()\n      });\n    }\n  }\n  \n  if (newAchievements.length > 0) {\n    const updatedProfile = {\n      ...userProfile,\n      achievements: [...currentAchievements, ...newAchievements],\n      experience: (userProfile.experience || 0) + (newAchievements.length * 100)\n    };\n    \n    await setStorageItem(STORAGE_KEYS.userProfile, updatedProfile);\n    return { profile: updatedProfile, newAchievements };\n  }\n  \n  return { profile: userProfile, newAchievements: [] };\n}\n\n// Data Export for Privacy (user can export their data)\nexport async function exportUserData() {\n  const profile = await getUserProfile();\n  const plan = await getCurrentStudyPlan();\n  const preferences = await getStorageItem(STORAGE_KEYS.preferences);\n  \n  return {\n    exportedAt: Date.now(),\n    profile,\n    currentPlan: plan,\n    preferences,\n    note: 'This is your complete zeroTrace AI study data. All data is stored locally on your device.'\n  };\n}\n\n// Privacy Controls\nexport async function clearAllStudyData() {\n  const keys = Object.values(STORAGE_KEYS);\n  return new Promise(resolve => {\n    chrome.storage.local.remove(keys, () => {\n      resolve(true);\n    });\n  });\n}\n\nexport async function getStorageUsage() {\n  return new Promise(resolve => {\n    chrome.storage.local.getBytesInUse(null, bytes => {\n      resolve({\n        usedBytes: bytes,\n        usedMB: (bytes / (1024 * 1024)).toFixed(2)\n      });\n    });\n  });\n}\n"
    },
    {
      "type": "writeFile",
      "path": "src/study/studyInterface.js",
      "ifExists": "overwrite",
      "description": "Study planning interface component for zeroTrace AI sidebar",
      "content": "// zeroTrace AI Study Interface - Integrated with existing sidebar\n\nimport { generateStudyPlan, updateUserProgress, getNextRecommendation, STUDY_CONFIG } from './adaptiveEngine.js';\nimport { getUserProfile, updateUserProfile, getCurrentStudyPlan, saveStudyPlan, recordStudySession, checkAndAwardAchievements } from './studyStorage.js';\n\nclass StudyInterface {\n  constructor() {\n    this.currentPlan = null;\n    this.userProfile = null;\n    this.activeBlock = null;\n    this.sessionStartTime = null;\n    this.init();\n  }\n  \n  async init() {\n    await this.loadUserData();\n    this.setupEventListeners();\n    this.renderInterface();\n    this.startDailyCheck();\n  }\n  \n  async loadUserData() {\n    this.userProfile = await getUserProfile();\n    this.currentPlan = await getCurrentStudyPlan();\n    \n    // Generate new plan if none exists or current plan is completed\n    if (!this.currentPlan || this.isPlanCompleted(this.currentPlan)) {\n      await this.generateNewPlan();\n    }\n  }\n  \n  isPlanCompleted(plan) {\n    return plan.blocks.every(block => block.completed);\n  }\n  \n  async generateNewPlan() {\n    try {\n      this.currentPlan = generateStudyPlan(this.userProfile, this.userProfile.preferences);\n      await saveStudyPlan(this.currentPlan);\n      this.renderInterface();\n      this.showNotification('New study plan generated! \ud83d\udcda', 'success');\n    } catch (error) {\n      console.error('Error generating study plan:', error);\n      this.showNotification('Failed to generate study plan', 'error');\n    }\n  }\n  \n  renderInterface() {\n    const container = this.getOrCreateContainer();\n    container.innerHTML = this.buildHTML();\n    this.bindEventHandlers();\n  }\n  \n  getOrCreateContainer() {\n    let container = document.getElementById('study-interface');\n    if (!container) {\n      container = document.createElement('div');\n      container.id = 'study-interface';\n      container.className = 'zt-study-container';\n      \n      // Insert into zeroTrace sidebar\n      const sidebar = document.querySelector('.sidebar-content') || document.body;\n      sidebar.appendChild(container);\n    }\n    return container;\n  }\n  \n  buildHTML() {\n    const recommendation = getNextRecommendation(this.userProfile);\n    const progress = this.calculateProgress();\n    \n    return `\n      <div class=\"study-header\">\n        <h2>\ud83c\udfaf Study Plan</h2>\n        <div class=\"level-badge\">\n          Level ${this.userProfile.level || 1} \u2022 ${this.userProfile.experience || 0} XP\n        </div>\n      </div>\n      \n      ${this.renderProgressSection(progress)}\n      ${this.renderRecommendationSection(recommendation)}\n      ${this.renderCurrentPlan()}\n      ${this.renderQuickActions()}\n      ${this.renderAchievements()}\n    `;\n  }\n  \n  renderProgressSection(progress) {\n    return `\n      <div class=\"progress-section\">\n        <div class=\"streak-display\">\n          <span class=\"streak-icon\">\ud83d\udd25</span>\n          <span class=\"streak-count\">${this.userProfile.stats?.streak || 0} day streak</span>\n        </div>\n        <div class=\"daily-progress\">\n          <div class=\"progress-bar\">\n            <div class=\"progress-fill\" style=\"width: ${progress.dailyPercent}%\"></div>\n          </div>\n          <span class=\"progress-text\">${progress.completedToday}/${progress.targetToday} min today</span>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderRecommendationSection(recommendation) {\n    const iconMap = {\n      'improvement': '\ud83d\udcc8',\n      'maintenance': '\ud83c\udf1f',\n      'challenge': '\ud83d\udcaa'\n    };\n    \n    return `\n      <div class=\"recommendation-card\">\n        <div class=\"rec-icon\">${iconMap[recommendation.type] || '\ud83d\udca1'}</div>\n        <div class=\"rec-content\">\n          <div class=\"rec-message\">${recommendation.message}</div>\n          <div class=\"rec-action\">\n            <button class=\"start-recommended\" data-skill=\"${recommendation.suggestedSkill}\" data-difficulty=\"${recommendation.difficulty}\">\n              Start ${recommendation.suggestedSkill} (${recommendation.difficulty})\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n  \n  renderCurrentPlan() {\n    if (!this.currentPlan || !this.currentPlan.blocks.length) {\n      return `\n        <div class=\"no-plan\">\n          <p>No active study plan</p>\n          <button class=\"generate-plan-btn\">Generate New Plan</button>\n        </div>\n      `;\n    }\n    \n    const blocksHTML = this.currentPlan.blocks.map(block => this.renderStudyBlock(block)).join('');\n    \n    return `\n      <div class=\"study-plan-section\">\n        <h3>Today's Plan</h3>\n        <div class=\"study-blocks\">\n          ${blocksHTML}\n        </div>\n      </div>\n    `;\n  }\n  \n  renderStudyBlock(block) {\n    const statusClass = block.completed ? 'completed' : block.started ? 'in-progress' : 'pending';\n    const statusIcon = block.completed ? '\u2705' : block.started ? '\ud83d\udd04' : '\u23ef\ufe0f';\n    \n    return `\n      <div class=\"study-block ${statusClass}\" data-block-id=\"${block.id}\">\n        <div class=\"block-header\">\n          <span class=\"block-status\">${statusIcon}</span>\n          <span class=\"block-skill\">${block.skill}</span>\n          <span class=\"block-duration\">${block.duration}min</span>\n        </div>\n        <div class=\"block-details\">\n          <div class=\"difficulty-badge difficulty-${block.difficulty}\">${block.difficulty}</div>\n          <div class=\"block-type\">${block.type}</div>\n        </div>\n        <div class=\"block-resources\">\n          ${block.resources.map(r => `<span class=\"resource-tag\">${r}</span>`).join('')}\n        </div>\n        <div class=\"block-actions\">\n          ${!block.completed ? `\n            <button class=\"start-block-btn\" data-block-id=\"${block.id}\">\n              ${block.started ? 'Continue' : 'Start'}\n            </button>\n          ` : ''}\n        </div>\n      </div>\n    `;\n  }\n  \n  renderQuickActions() {\n    return `\n      <div class=\"quick-actions\">\n        <button class=\"action-btn\" id=\"practice-dsa\">\n          \ud83e\uddee Quick DSA Practice\n        </button>\n        <button class=\"action-btn\" id=\"review-concepts\">\n          \ud83d\udcd6 Review Concepts\n        </button>\n        <button class=\"action-btn\" id=\"view-progress\">\n          \ud83d\udcca View Progress\n        </button>\n      </div>\n    `;\n  }\n  \n  renderAchievements() {\n    const recentAchievements = (this.userProfile.achievements || [])\n      .sort((a, b) => b.earnedAt - a.earnedAt)\n      .slice(0, 3);\n    \n    if (!recentAchievements.length) return '';\n    \n    return `\n      <div class=\"achievements-section\">\n        <h4>Recent Achievements</h4>\n        <div class=\"achievement-list\">\n          ${recentAchievements.map(achievement => `\n            <div class=\"achievement-item\">\n              <span class=\"achievement-icon\">${achievement.icon}</span>\n              <div class=\"achievement-details\">\n                <div class=\"achievement-name\">${achievement.name}</div>\n                <div class=\"achievement-desc\">${achievement.description}</div>\n              </div>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    `;\n  }\n  \n  bindEventHandlers() {\n    // Start recommended practice\n    document.querySelectorAll('.start-recommended').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const skill = e.target.dataset.skill;\n        const difficulty = e.target.dataset.difficulty;\n        this.startPracticeSession(skill, difficulty);\n      });\n    });\n    \n    // Start study blocks\n    document.querySelectorAll('.start-block-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const blockId = e.target.dataset.blockId;\n        this.startStudyBlock(blockId);\n      });\n    });\n    \n    // Generate new plan\n    document.querySelectorAll('.generate-plan-btn').forEach(btn => {\n      btn.addEventListener('click', () => this.generateNewPlan());\n    });\n    \n    // Quick actions\n    document.getElementById('practice-dsa')?.addEventListener('click', () => {\n      this.triggerDSAPractice();\n    });\n    \n    document.getElementById('review-concepts')?.addEventListener('click', () => {\n      this.openConceptReview();\n    });\n    \n    document.getElementById('view-progress')?.addEventListener('click', () => {\n      this.showProgressModal();\n    });\n  }\n  \n  async startStudyBlock(blockId) {\n    const block = this.currentPlan.blocks.find(b => b.id === blockId);\n    if (!block) return;\n    \n    this.activeBlock = block;\n    this.sessionStartTime = Date.now();\n    \n    // Update block status\n    block.started = true;\n    block.startTime = this.sessionStartTime;\n    await saveStudyPlan(this.currentPlan);\n    \n    // Integrate with existing zeroTrace AI modes\n    this.integrateWithZeroTrace(block);\n    \n    this.showNotification(`Started ${block.skill} practice session`, 'info');\n    this.renderInterface();\n  }\n  \n  integrateWithZeroTrace(block) {\n    // Send study context to zeroTrace AI system\n    const studyContext = {\n      mode: 'study',\n      skill: block.skill,\n      difficulty: block.difficulty,\n      resources: block.resources,\n      duration: block.duration\n    };\n    \n    // Trigger zeroTrace AI with study context\n    if (window.zeroTraceAI) {\n      window.zeroTraceAI.setStudyMode(studyContext);\n    }\n    \n    // Switch to appropriate mode (Code for DSA, Research for concepts, etc.)\n    const modeMap = {\n      'arrays': 'code',\n      'linkedlists': 'code', \n      'trees': 'code',\n      'graphs': 'code',\n      'dp': 'code',\n      'system-design': 'research'\n    };\n    \n    const targetMode = modeMap[block.skill] || 'chat';\n    this.switchToMode(targetMode);\n  }\n  \n  switchToMode(mode) {\n    // Integrate with existing zeroTrace sidebar mode switching\n    const modeButton = document.querySelector(`[data-mode=\"${mode}\"]`);\n    if (modeButton) {\n      modeButton.click();\n    }\n  }\n  \n  async completeCurrentSession(sessionData = {}) {\n    if (!this.activeBlock || !this.sessionStartTime) return;\n    \n    const duration = Math.floor((Date.now() - this.sessionStartTime) / (1000 * 60));\n    const session = {\n      blockId: this.activeBlock.id,\n      skill: this.activeBlock.skill,\n      difficulty: this.activeBlock.difficulty,\n      duration,\n      ...sessionData\n    };\n    \n    // Record session and update progress\n    await recordStudySession(session);\n    this.userProfile = await getUserProfile();\n    \n    // Mark block as completed\n    this.activeBlock.completed = true;\n    this.activeBlock.completedAt = Date.now();\n    await saveStudyPlan(this.currentPlan);\n    \n    // Check for achievements\n    const { profile, newAchievements } = await checkAndAwardAchievements(this.userProfile);\n    this.userProfile = profile;\n    \n    if (newAchievements.length > 0) {\n      this.showAchievementNotification(newAchievements);\n    }\n    \n    this.activeBlock = null;\n    this.sessionStartTime = null;\n    this.renderInterface();\n  }\n  \n  calculateProgress() {\n    const today = new Date().toDateString();\n    const todaySessions = (this.userProfile.sessionHistory || [])\n      .filter(session => new Date(session.timestamp).toDateString() === today);\n    \n    const completedToday = todaySessions.reduce((sum, session) => sum + (session.duration || 0), 0);\n    const targetToday = this.userProfile.preferences?.dailyTarget || STUDY_CONFIG.dailyTargetMinutes;\n    const dailyPercent = Math.min(100, (completedToday / targetToday) * 100);\n    \n    return {\n      completedToday,\n      targetToday,\n      dailyPercent\n    };\n  }\n  \n  setupEventListeners() {\n    // Listen for DSA problem completions from main zeroTrace system\n    document.addEventListener('zeroTrace:problemSolved', (event) => {\n      const { problem, success, difficulty } = event.detail;\n      if (this.activeBlock) {\n        this.completeCurrentSession({\n          problemsCompleted: 1,\n          success,\n          difficulty\n        });\n      }\n    });\n    \n    // Listen for mode changes\n    document.addEventListener('zeroTrace:modeChanged', (event) => {\n      if (event.detail.mode === 'study') {\n        this.renderInterface();\n      }\n    });\n  }\n  \n  triggerDSAPractice() {\n    // Integrate with existing DSA solver\n    const dsaSolverBtn = document.querySelector('[data-mode=\"dsa\"]');\n    if (dsaSolverBtn) {\n      dsaSolverBtn.click();\n    }\n  }\n  \n  showNotification(message, type = 'info') {\n    // Use existing zeroTrace notification system or create simple one\n    if (window.zeroTraceNotifications) {\n      window.zeroTraceNotifications.show(message, type);\n    } else {\n      console.log(`[ZeroTrace Study] ${message}`);\n    }\n  }\n  \n  showAchievementNotification(achievements) {\n    achievements.forEach(achievement => {\n      this.showNotification(\n        `\ud83c\udf89 Achievement Unlocked: ${achievement.name} - ${achievement.description}`,\n        'success'\n      );\n    });\n  }\n  \n  startDailyCheck() {\n    // Check daily progress and send reminders\n    setInterval(() => {\n      this.checkDailyProgress();\n    }, 60 * 60 * 1000); // Check every hour\n  }\n  \n  async checkDailyProgress() {\n    const progress = this.calculateProgress();\n    const currentHour = new Date().getHours();\n    \n    // Send reminder if behind on daily goal (between 10 AM and 8 PM)\n    if (currentHour >= 10 && currentHour <= 20 && progress.dailyPercent < 50) {\n      this.showNotification(\n        `\ud83d\udcda You're ${Math.round(50 - progress.dailyPercent)}% behind on today's study goal!`,\n        'reminder'\n      );\n    }\n  }\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new StudyInterface());\n} else {\n  new StudyInterface();\n}\n\nexport { StudyInterface };\n"
    },
    {
      "type": "writeFile",
      "path": "src/study/studyStyles.css",
      "ifExists": "overwrite",
      "description": "Styles for study interface matching zeroTrace AI design system",
      "content": "/* zeroTrace AI Study Interface Styles */\n\n.zt-study-container {\n  font-family: system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, sans-serif;\n  background: #0b0f14;\n  color: #e9edf1;\n  padding: 0;\n  margin: 0;\n}\n\n/* Study Header */\n.study-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px;\n  border-bottom: 1px solid #20303f;\n  background: linear-gradient(135deg, #143044 0%, #0f1419 100%);\n}\n\n.study-header h2 {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.level-badge {\n  background: #2a4155;\n  padding: 4px 12px;\n  border-radius: 16px;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n/* Progress Section */\n.progress-section {\n  padding: 16px;\n  border-bottom: 1px solid #20303f;\n}\n\n.streak-display {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 12px;\n}\n\n.streak-icon {\n  font-size: 20px;\n}\n\n.streak-count {\n  font-weight: 600;\n  color: #ffa726;\n}\n\n.daily-progress {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.progress-bar {\n  flex: 1;\n  height: 8px;\n  background: #20303f;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #4caf50, #66bb6a);\n  border-radius: 4px;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  font-size: 12px;\n  color: #a0aec0;\n  white-space: nowrap;\n}\n\n/* Recommendation Card */\n.recommendation-card {\n  display: flex;\n  gap: 12px;\n  padding: 16px;\n  background: linear-gradient(135deg, #1a2332 0%, #0f141b 100%);\n  border: 1px solid #2a4155;\n  border-radius: 8px;\n  margin: 16px;\n}\n\n.rec-icon {\n  font-size: 24px;\n  flex-shrink: 0;\n}\n\n.rec-content {\n  flex: 1;\n}\n\n.rec-message {\n  margin-bottom: 8px;\n  font-size: 14px;\n  line-height: 1.4;\n}\n\n.start-recommended {\n  background: #4caf50;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 500;\n  transition: background 0.2s;\n}\n\n.start-recommended:hover {\n  background: #45a049;\n}\n\n/* Study Plan Section */\n.study-plan-section {\n  padding: 16px;\n}\n\n.study-plan-section h3 {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.study-blocks {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\n\n/* Study Block */\n.study-block {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 12px;\n  transition: all 0.2s;\n}\n\n.study-block.completed {\n  background: rgba(76, 175, 80, 0.1);\n  border-color: #4caf50;\n}\n\n.study-block.in-progress {\n  background: rgba(255, 167, 38, 0.1);\n  border-color: #ffa726;\n}\n\n.block-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n.block-status {\n  font-size: 16px;\n}\n\n.block-skill {\n  flex: 1;\n  font-weight: 600;\n  text-transform: capitalize;\n}\n\n.block-duration {\n  background: #2a4155;\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n}\n\n.block-details {\n  display: flex;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n.difficulty-badge {\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n  text-transform: capitalize;\n}\n\n.difficulty-easy {\n  background: rgba(76, 175, 80, 0.2);\n  color: #4caf50;\n}\n\n.difficulty-medium {\n  background: rgba(255, 167, 38, 0.2);\n  color: #ffa726;\n}\n\n.difficulty-hard {\n  background: rgba(244, 67, 54, 0.2);\n  color: #f44336;\n}\n\n.difficulty-expert {\n  background: rgba(156, 39, 176, 0.2);\n  color: #9c27b0;\n}\n\n.block-type {\n  padding: 2px 8px;\n  background: #20303f;\n  border-radius: 12px;\n  font-size: 11px;\n  color: #a0aec0;\n  text-transform: capitalize;\n}\n\n.block-resources {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 4px;\n  margin-bottom: 8px;\n}\n\n.resource-tag {\n  background: #2a4155;\n  padding: 2px 6px;\n  border-radius: 8px;\n  font-size: 10px;\n  color: #cbd5e0;\n}\n\n.block-actions {\n  text-align: right;\n}\n\n.start-block-btn {\n  background: #143044;\n  border: 1px solid #2a4155;\n  color: #e9edf1;\n  padding: 6px 12px;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 12px;\n  transition: all 0.2s;\n}\n\n.start-block-btn:hover {\n  background: #2a4155;\n}\n\n/* Quick Actions */\n.quick-actions {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 16px;\n  border-top: 1px solid #20303f;\n}\n\n.action-btn {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: #143044;\n  border: 1px solid #2a4155;\n  color: #e9edf1;\n  padding: 12px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: all 0.2s;\n  width: 100%;\n  text-align: left;\n}\n\n.action-btn:hover {\n  background: #2a4155;\n}\n\n/* Achievements Section */\n.achievements-section {\n  padding: 16px;\n  border-top: 1px solid #20303f;\n}\n\n.achievements-section h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  font-weight: 600;\n  color: #a0aec0;\n}\n\n.achievement-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.achievement-item {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: rgba(255, 193, 7, 0.1);\n  border: 1px solid rgba(255, 193, 7, 0.3);\n  border-radius: 6px;\n  padding: 8px;\n}\n\n.achievement-icon {\n  font-size: 16px;\n  flex-shrink: 0;\n}\n\n.achievement-details {\n  flex: 1;\n}\n\n.achievement-name {\n  font-size: 12px;\n  font-weight: 600;\n  color: #ffc107;\n}\n\n.achievement-desc {\n  font-size: 11px;\n  color: #a0aec0;\n}\n\n/* No Plan State */\n.no-plan {\n  text-align: center;\n  padding: 32px 16px;\n  color: #a0aec0;\n}\n\n.generate-plan-btn {\n  background: #4caf50;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  margin-top: 16px;\n  transition: background 0.2s;\n}\n\n.generate-plan-btn:hover {\n  background: #45a049;\n}\n\n/* Responsive Design */\n@media (max-width: 320px) {\n  .study-header {\n    flex-direction: column;\n    gap: 8px;\n    text-align: center;\n  }\n  \n  .daily-progress {\n    flex-direction: column;\n    gap: 8px;\n  }\n  \n  .progress-bar {\n    width: 100%;\n  }\n  \n  .block-header {\n    flex-wrap: wrap;\n  }\n  \n  .block-details {\n    flex-wrap: wrap;\n  }\n}\n\n/* Animation for new achievements */\n@keyframes achievementPulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n  100% { transform: scale(1); }\n}\n\n.achievement-item.new {\n  animation: achievementPulse 0.5s ease-in-out;\n}\n\n/* Loading states */\n.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.loading::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 20px;\n  height: 20px;\n  margin: -10px 0 0 -10px;\n  border: 2px solid #2a4155;\n  border-top-color: #4caf50;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n"
    },
    {
      "type": "updateFile",
      "path": "background.js",
      "action": "append",
      "description": "Add study plan alarm and notification handling to existing background script",
      "content": "\n\n// zeroTrace AI Study Plan Integration\nchrome.runtime.onInstalled.addListener(async () => {\n  // Set up daily study reminder alarm\n  chrome.alarms.create('zt_daily_study_reminder', {\n    delayInMinutes: 1,\n    periodInMinutes: 60 * 24 // Daily\n  });\n  \n  // Set up hourly progress check\n  chrome.alarms.create('zt_study_progress_check', {\n    delayInMinutes: 1,\n    periodInMinutes: 60 // Hourly\n  });\n  \n  console.log('[zeroTrace Study] Background services initialized');\n});\n\n// Handle study-related alarms\nchrome.alarms.onAlarm.addListener(async (alarm) => {\n  if (alarm.name === 'zt_daily_study_reminder') {\n    await handleDailyStudyReminder();\n  } else if (alarm.name === 'zt_study_progress_check') {\n    await handleProgressCheck();\n  }\n});\n\nasync function handleDailyStudyReminder() {\n  try {\n    const { zt_study_profile } = await chrome.storage.local.get(['zt_study_profile']);\n    \n    if (!zt_study_profile || !zt_study_profile.preferences?.reminderEnabled) {\n      return;\n    }\n    \n    const today = new Date().toDateString();\n    const lastActive = zt_study_profile.stats?.lastActive;\n    const lastActiveDate = lastActive ? new Date(lastActive).toDateString() : null;\n    \n    // Send reminder if user hasn't been active today\n    if (lastActiveDate !== today) {\n      chrome.notifications.create('zt_daily_reminder', {\n        type: 'basic',\n        iconUrl: 'assets/icon128.png',\n        title: 'zeroTrace AI Study Reminder',\n        message: `Time for your daily coding practice! \ud83d\ude80 Maintain your ${zt_study_profile.stats?.streak || 0} day streak.`\n      });\n    }\n  } catch (error) {\n    console.error('[zeroTrace Study] Daily reminder error:', error);\n  }\n}\n\nasync function handleProgressCheck() {\n  try {\n    const { zt_study_profile, zt_current_plan } = await chrome.storage.local.get(['zt_study_profile', 'zt_current_plan']);\n    \n    if (!zt_study_profile || !zt_current_plan) return;\n    \n    const currentHour = new Date().getHours();\n    \n    // Only send progress reminders during reasonable hours (9 AM - 9 PM)\n    if (currentHour < 9 || currentHour > 21) return;\n    \n    const today = new Date().toDateString();\n    const todaySessions = (zt_study_profile.sessionHistory || [])\n      .filter(session => new Date(session.timestamp).toDateString() === today);\n    \n    const completedToday = todaySessions.reduce((sum, session) => sum + (session.duration || 0), 0);\n    const targetToday = zt_study_profile.preferences?.dailyTarget || 90;\n    const progress = (completedToday / targetToday) * 100;\n    \n    // Send mid-day reminder if significantly behind (less than 30% at 2 PM)\n    if (currentHour === 14 && progress < 30) {\n      chrome.notifications.create('zt_progress_reminder', {\n        type: 'basic',\n        iconUrl: 'assets/icon128.png', \n        title: 'zeroTrace AI Study Progress',\n        message: `You're ${Math.round(30 - progress)}% behind today's goal. Take a quick study break! \ud83d\udcda`\n      });\n    }\n  } catch (error) {\n    console.error('[zeroTrace Study] Progress check error:', error);\n  }\n}\n\n// Handle notification clicks\nchrome.notifications.onClicked.addListener(async (notificationId) => {\n  if (notificationId.startsWith('zt_')) {\n    // Open zeroTrace extension when study notification is clicked\n    const tabs = await chrome.tabs.query({ active: true, lastFocusedWindow: true });\n    if (tabs[0]) {\n      chrome.tabs.sendMessage(tabs[0].id, {\n        action: 'open_study_interface',\n        source: 'notification'\n      });\n    }\n    chrome.notifications.clear(notificationId);\n  }\n});\n\n// Message handler for study-related communications\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\n  if (message.action === 'record_study_session') {\n    try {\n      const { sessionData } = message;\n      const { zt_study_profile } = await chrome.storage.local.get(['zt_study_profile']);\n      \n      if (zt_study_profile) {\n        // Update session history\n        const updatedHistory = [...(zt_study_profile.sessionHistory || []), {\n          ...sessionData,\n          timestamp: Date.now(),\n          id: `session_${Date.now()}`\n        }].slice(-50); // Keep last 50 sessions\n        \n        // Update profile\n        const updatedProfile = {\n          ...zt_study_profile,\n          sessionHistory: updatedHistory,\n          stats: {\n            ...zt_study_profile.stats,\n            totalStudyTime: (zt_study_profile.stats?.totalStudyTime || 0) + (sessionData.duration || 0),\n            problemsSolved: (zt_study_profile.stats?.problemsSolved || 0) + (sessionData.problemsCompleted || 0),\n            lastActive: Date.now()\n          }\n        };\n        \n        await chrome.storage.local.set({ zt_study_profile: updatedProfile });\n        sendResponse({ success: true });\n      }\n    } catch (error) {\n      console.error('[zeroTrace Study] Session recording error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n    return true; // Keep message channel open for async response\n  }\n});\n"
    },
    {
      "type": "updateFile",
      "path": "src/modes/modes.js",
      "action": "prepend",
      "description": "Add Study Plan mode to existing zeroTrace AI modes",
      "content": "// Import study interface\nimport '../study/studyInterface.js';\n\n// Add Study Plan mode to existing modes\nconst STUDY_MODE = {\n  id: 'study',\n  name: 'Study Plan',\n  icon: '\ud83c\udfaf',\n  description: 'AI-powered adaptive study planning for DSA and coding skills',\n  features: [\n    'Personalized study plans',\n    'Progress tracking',\n    'Skill assessment', \n    'Achievement system',\n    'Daily reminders'\n  ]\n};\n\n// Function to add study mode to existing mode system\nfunction integrateStudyMode() {\n  // Add to modes array if it exists\n  if (window.zeroTraceModes && Array.isArray(window.zeroTraceModes)) {\n    window.zeroTraceModes.push(STUDY_MODE);\n  }\n  \n  // Register mode handler\n  if (window.zeroTraceHandlers) {\n    window.zeroTraceHandlers.study = handleStudyMode;\n  }\n  \n  console.log('[zeroTrace] Study Plan mode integrated');\n}\n\nfunction handleStudyMode() {\n  // Switch to study interface\n  const studyContainer = document.getElementById('study-interface');\n  if (studyContainer) {\n    studyContainer.style.display = 'block';\n  }\n  \n  // Hide other mode interfaces\n  ['chat-interface', 'dsa-interface', 'research-interface'].forEach(id => {\n    const element = document.getElementById(id);\n    if (element) element.style.display = 'none';\n  });\n  \n  // Dispatch mode change event\n  document.dispatchEvent(new CustomEvent('zeroTrace:modeChanged', {\n    detail: { mode: 'study' }\n  }));\n}\n\n// Auto-integrate when script loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', integrateStudyMode);\n} else {\n  integrateStudyMode();\n}\n\nexport { STUDY_MODE, handleStudyMode, integrateStudyMode };\n\n"
    },
    {
      "type": "writeFile",
      "path": "docs/STUDY_PLAN_INTEGRATION.md",
      "ifExists": "overwrite",
      "description": "Documentation for the integrated study plan feature",
      "content": "# zeroTrace AI Study Plan Integration\n\n## Overview\n\nThis integration adds CASCADE's adaptive study planning capabilities to zeroTrace AI while maintaining the extension's privacy-first architecture and seamless integration with existing DSA problem-solving features.\n\n## Features Added\n\n### \ud83c\udfaf Adaptive Study Planning\n- **Personalized Plans**: AI-generated study plans based on your DSA solving patterns\n- **Dynamic Adjustment**: Plans adapt based on your performance and progress\n- **Skill-Focused**: Targets weak areas in programming and algorithmic thinking\n- **Time Management**: Optimizes study sessions for maximum learning efficiency\n\n### \ud83d\udcca Progress Tracking\n- **Skill Scoring**: Tracks proficiency in DSA topics (Arrays, Trees, DP, etc.)\n- **Session History**: Records study sessions and problem-solving statistics\n- **Streak Tracking**: Maintains daily study streaks for motivation\n- **Achievement System**: Unlocks achievements for milestones and consistent practice\n\n### \ud83d\udd12 Privacy-First Design\n- **Local Storage**: All data stored locally using chrome.storage.local\n- **No External Servers**: Study data never leaves your browser\n- **Data Control**: Users can export or clear their study data anytime\n- **Minimal Data**: Only essential learning metrics are tracked\n\n### \ud83d\udd04 zeroTrace AI Integration\n- **Mode Integration**: New 'Study Plan' mode in the existing sidebar\n- **DSA Synergy**: Integrates with existing DSA problem solver\n- **AI Context**: Uses existing AI models for study recommendations\n- **Seamless UX**: Matches zeroTrace's design language and user experience\n\n## File Structure\n\n```\nsrc/study/\n\u251c\u2500\u2500 adaptiveEngine.js     # Core study planning algorithms\n\u251c\u2500\u2500 studyStorage.js       # Privacy-first data management \n\u251c\u2500\u2500 studyInterface.js     # UI components and interactions\n\u2514\u2500\u2500 studyStyles.css       # Styling matching zeroTrace design\n\ndocs/\n\u2514\u2500\u2500 STUDY_PLAN_INTEGRATION.md  # This documentation\n```\n\n## Usage\n\n### Getting Started\n1. **Install/Update Extension**: Apply this integration to your zeroTrace AI extension\n2. **Access Study Mode**: Click the 'Study Plan' mode in the sidebar (\ud83c\udfaf icon)\n3. **Initial Setup**: The system will create a default user profile automatically\n4. **Generate Plan**: Click 'Generate New Plan' to create your first adaptive study plan\n\n### Daily Workflow\n1. **Check Today's Plan**: View personalized study blocks for the day\n2. **Start Sessions**: Click 'Start' on any study block to begin focused practice\n3. **Practice Problems**: Use the integrated DSA solver or other zeroTrace AI modes\n4. **Track Progress**: Sessions are automatically recorded and contribute to skill scores\n5. **Earn Achievements**: Unlock rewards for consistent practice and milestones\n\n### Study Block Types\n- **Focused Practice**: Deep dive into specific weak areas (Arrays, Trees, etc.)\n- **Mixed Review**: Review previously learned concepts to strengthen retention\n- **Challenge Mode**: Advanced problems to push your boundaries\n- **Concept Study**: Theory and understanding-focused sessions\n\n## Technical Implementation\n\n### Adaptive Algorithm\nThe study engine uses several factors to create personalized plans:\n\n```javascript\n// Core scoring algorithm\nfunction calculateSkillScore(skill, recentSessions) {\n  // Factors: recency, performance, difficulty, consistency\n  const recencyWeight = Math.exp(-(now - session.timestamp) / dayInMs);\n  const performanceScore = session.success ? difficulty * 25 : difficulty * 10;\n  return performanceScore * recencyWeight;\n}\n```\n\n### Storage Schema\n```javascript\n// User Profile Structure\n{\n  id: 'user_timestamp',\n  skillScores: { 'arrays': 150, 'trees': 200, ... },\n  sessionHistory: [{ skill, success, difficulty, timestamp }, ...],\n  preferences: { dailyTarget: 90, reminderEnabled: true },\n  stats: { totalStudyTime: 2400, problemsSolved: 45, streak: 7 },\n  achievements: [{ id, name, description, earnedAt, icon }, ...]\n}\n```\n\n### Privacy Safeguards\n- **Data Minimization**: Only learning-relevant data is stored\n- **Local Processing**: All algorithms run client-side\n- **Automatic Cleanup**: Session history limited to last 50 entries\n- **User Control**: Clear data and export functions available\n\n## Integration Points\n\n### With Existing DSA Solver\n```javascript\n// Listen for problem completions\ndocument.addEventListener('zeroTrace:problemSolved', (event) => {\n  const { problem, success, difficulty } = event.detail;\n  recordStudySession({ skill: problem.topic, success, difficulty });\n});\n```\n\n### With AI Modes\n```javascript\n// Context-aware mode switching\nfunction integrateWithZeroTrace(studyBlock) {\n  const modeMap = {\n    'arrays': 'code',     // Switch to Code mode for array problems\n    'graphs': 'code',     // Switch to Code mode for graph problems \n    'system-design': 'research'  // Switch to Research mode for system design\n  };\n  switchToMode(modeMap[studyBlock.skill] || 'chat');\n}\n```\n\n## Configuration\n\n### Study Configuration\n```javascript\nexport const STUDY_CONFIG = {\n  dailyTargetMinutes: 90,    // Default daily study goal\n  maxFocusSession: 45,       // Maximum single session length\n  minStudyBlock: 15,         // Minimum viable study block\n  difficultyLevels: ['easy', 'medium', 'hard', 'expert'],\n  skillDomains: {\n    'dsa': ['arrays', 'trees', 'graphs', 'dp', 'greedy'],\n    'programming': ['cpp', 'python', 'java', 'javascript']\n  }\n};\n```\n\n### Proficiency Levels\n- **Beginner (0-100)**: \ud83c\udf31 Learning fundamentals\n- **Basic (101-200)**: \u26a1 Understanding core concepts \n- **Intermediate (201-300)**: \ud83d\ude80 Applying knowledge confidently\n- **Advanced (301-400)**: \ud83c\udfaf Mastering complex scenarios\n- **Master (401-500)**: \ud83d\udc51 Teaching and innovating\n\n## Notifications & Reminders\n\n### Daily Reminders\n- Sent if user hasn't been active that day\n- Respectful timing (only during reasonable hours)\n- Includes current streak information for motivation\n\n### Progress Alerts\n- Mid-day check if significantly behind daily goal\n- Achievement notifications for unlocked rewards\n- Weekly summary of progress and achievements\n\n## Privacy & Data Management\n\n### Data Stored Locally\n- User study profile and preferences\n- Session history (last 50 sessions only)\n- Current study plan and progress\n- Achievement data and experience points\n\n### Data NOT Stored\n- Personal identifying information\n- Device or browser fingerprints\n- External tracking or analytics\n- Cloud sync or backup data\n\n### User Controls\n```javascript\n// Export all study data\nconst userData = await exportUserData();\n\n// Clear all study data\nawait clearAllStudyData();\n\n// Check storage usage\nconst usage = await getStorageUsage();\n```\n\n## Future Enhancements\n\n### Planned Features\n- **Group Study**: Share progress with study partners\n- **Custom Goals**: Set specific skill or time-based objectives\n- **Advanced Analytics**: Detailed performance insights and trends\n- **Content Integration**: Curated learning resources for each topic\n- **Competition Mode**: Friendly competition with other users\n\n### Extension Points\n- **Custom Algorithms**: Plugin system for alternative study algorithms\n- **Theme Support**: Custom styling and personalization options\n- **Export Formats**: Additional data export formats (CSV, JSON, PDF)\n- **Integration APIs**: Connect with external learning platforms\n\n## Troubleshooting\n\n### Common Issues\n\n**Study plan not generating**\n- Check if user profile exists in chrome.storage.local\n- Verify background script permissions are granted\n- Look for errors in browser console\n\n**Sessions not recording**\n- Ensure proper event listeners are attached\n- Check integration with existing DSA solver events\n- Verify storage permissions are working\n\n**Notifications not showing**\n- Confirm notification permissions are granted\n- Check alarm registration in background script\n- Verify notification timing logic\n\n### Debug Mode\nEnable debug logging by setting:\n```javascript\nwindow.zeroTraceDebug = true;\n```\n\n## Support\n\nFor issues related to the study plan integration:\n1. Check browser console for error messages\n2. Verify all files are properly loaded\n3. Test storage permissions and functionality\n4. Review integration points with existing zeroTrace features\n\nThis integration maintains zeroTrace AI's core values of privacy, performance, and user empowerment while adding powerful adaptive learning capabilities.\n"
    }
  ]
}