{
  "$id": "zerotrace_adaptive_realtime_integration.json",
  "version": "3.0.0",
  "description": "Updates adaptive learning dashboard to use real-time data and match zeroTrace AI aesthetics",
  "target": "Transform mock data dashboard into real-time tracking system with zeroTrace UI consistency",
  "objectives": [
    "Replace mock data with real chrome.storage.local integration",
    "Show mock data only when no user interactions exist",
    "Switch to real-time updates when user interacts with extension",
    "Match existing zeroTrace AI visual aesthetics completely",
    "Preserve all existing extension functionality",
    "Track actual DSA problem solving and study sessions"
  ],
  "ui_requirements": {
    "color_scheme": "Match zeroTrace dark theme with purple accents (#8b5cf6, #6366f1)",
    "typography": "Use existing zeroTrace font stack and sizing",
    "card_styling": "Match existing mode cards design and spacing",
    "button_styling": "Use existing zeroTrace button styles and hover effects",
    "layout": "Maintain consistency with existing sidebar and panels"
  },
  "data_integration": {
    "storage_keys": [
      "zt_study_stats",
      "zt_dsa_progress",
      "zt_session_history",
      "zt_daily_tracking",
      "zt_achievements_earned"
    ],
    "real_time_tracking": [
      "DSA problems solved via existing solver",
      "Study session duration and frequency",
      "Daily streak maintenance",
      "Skill progression in different topics",
      "Achievement unlocks based on real activity"
    ]
  },
  "instructions": [
    "This updates the existing StudyDashboard to be fully functional with real data",
    "Mock data displays only for new users with no interaction history",
    "Real-time updates happen when users solve problems or study",
    "UI styling matches existing zeroTrace design system exactly",
    "All tracking data stored locally in chrome.storage.local",
    "After applying: extension tracks real usage and shows actual progress"
  ],
  "actions": [
    {
      "type": "writeFile",
      "path": "src/hooks/useStudyData.js",
      "ifExists": "overwrite",
      "description": "Custom hook for managing real-time study data with mock fallbacks",
      "content": "import { useState, useEffect, useCallback } from 'react';\n\n// Storage keys for study data\nconst STORAGE_KEYS = {\n  stats: 'zt_study_stats',\n  progress: 'zt_dsa_progress',\n  sessions: 'zt_session_history',\n  daily: 'zt_daily_tracking',\n  achievements: 'zt_achievements_earned',\n  settings: 'zt_study_settings'\n};\n\n// Mock data for new users\nconst MOCK_DATA = {\n  stats: {\n    streak: 0,\n    problemsSolved: 0,\n    studyTime: '0h',\n    totalMinutes: 0,\n    lastActive: null,\n    joinedDate: Date.now()\n  },\n  progress: {\n    'arrays': 0,\n    'strings': 0,\n    'linkedlists': 0,\n    'trees': 0,\n    'graphs': 0,\n    'dp': 0,\n    'greedy': 0,\n    'backtracking': 0\n  },\n  daily: {\n    todayMinutes: 0,\n    dailyGoal: 60,\n    todayProblems: 0,\n    problemGoal: 5,\n    lastDate: new Date().toDateString()\n  },\n  sessions: [],\n  achievements: []\n};\n\n// Sample mock data for demo purposes (shown when user has no real activity)\nconst DEMO_DATA = {\n  stats: {\n    streak: 3,\n    problemsSolved: 12,\n    studyTime: '4h 30m',\n    totalMinutes: 270,\n    lastActive: Date.now() - (2 * 60 * 60 * 1000), // 2 hours ago\n    joinedDate: Date.now() - (7 * 24 * 60 * 60 * 1000) // 7 days ago\n  },\n  progress: {\n    'arrays': 45,\n    'strings': 30,\n    'linkedlists': 60,\n    'trees': 25,\n    'graphs': 15,\n    'dp': 35,\n    'greedy': 40,\n    'backtracking': 20\n  },\n  daily: {\n    todayMinutes: 25,\n    dailyGoal: 60,\n    todayProblems: 2,\n    problemGoal: 5,\n    lastDate: new Date().toDateString()\n  },\n  sessions: [\n    { id: 1, type: 'dsa', topic: 'arrays', duration: 20, problems: 2, success: true, timestamp: Date.now() - (3 * 60 * 60 * 1000) },\n    { id: 2, type: 'review', topic: 'linkedlists', duration: 15, problems: 1, success: true, timestamp: Date.now() - (5 * 60 * 60 * 1000) }\n  ],\n  achievements: [\n    { id: 'first_problem', name: 'First Steps', description: 'Solved your first problem', icon: '\ud83c\udfaf', earned: Date.now() - (2 * 24 * 60 * 60 * 1000) }\n  ]\n};\n\nexport const useStudyData = () => {\n  const [studyData, setStudyData] = useState(MOCK_DATA);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasRealData, setHasRealData] = useState(false);\n\n  // Load data from chrome storage\n  const loadStudyData = useCallback(async () => {\n    try {\n      const keys = Object.values(STORAGE_KEYS);\n      const result = await new Promise(resolve => {\n        chrome.storage.local.get(keys, resolve);\n      });\n\n      // Check if user has any real interaction data\n      const stats = result[STORAGE_KEYS.stats] || MOCK_DATA.stats;\n      const hasInteractions = stats.problemsSolved > 0 || stats.totalMinutes > 0;\n      \n      setHasRealData(hasInteractions);\n\n      if (hasInteractions) {\n        // Use real data\n        setStudyData({\n          stats: result[STORAGE_KEYS.stats] || MOCK_DATA.stats,\n          progress: result[STORAGE_KEYS.progress] || MOCK_DATA.progress,\n          daily: result[STORAGE_KEYS.daily] || MOCK_DATA.daily,\n          sessions: result[STORAGE_KEYS.sessions] || MOCK_DATA.sessions,\n          achievements: result[STORAGE_KEYS.achievements] || MOCK_DATA.achievements\n        });\n      } else {\n        // Show demo data for new users\n        setStudyData(DEMO_DATA);\n      }\n    } catch (error) {\n      console.error('Error loading study data:', error);\n      setStudyData(DEMO_DATA);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Save data to chrome storage\n  const saveStudyData = useCallback(async (newData) => {\n    try {\n      const dataToSave = {\n        [STORAGE_KEYS.stats]: newData.stats,\n        [STORAGE_KEYS.progress]: newData.progress,\n        [STORAGE_KEYS.daily]: newData.daily,\n        [STORAGE_KEYS.sessions]: newData.sessions.slice(-50), // Keep last 50 sessions\n        [STORAGE_KEYS.achievements]: newData.achievements\n      };\n\n      await new Promise(resolve => {\n        chrome.storage.local.set(dataToSave, resolve);\n      });\n\n      setStudyData(newData);\n      setHasRealData(true);\n    } catch (error) {\n      console.error('Error saving study data:', error);\n    }\n  }, []);\n\n  // Record a study session\n  const recordSession = useCallback(async (sessionData) => {\n    const session = {\n      id: Date.now(),\n      timestamp: Date.now(),\n      ...sessionData\n    };\n\n    const updatedData = {\n      ...studyData,\n      stats: {\n        ...studyData.stats,\n        problemsSolved: studyData.stats.problemsSolved + (sessionData.problems || 0),\n        totalMinutes: studyData.stats.totalMinutes + (sessionData.duration || 0),\n        studyTime: formatStudyTime(studyData.stats.totalMinutes + (sessionData.duration || 0)),\n        lastActive: Date.now()\n      },\n      progress: {\n        ...studyData.progress,\n        [sessionData.topic]: (studyData.progress[sessionData.topic] || 0) + (sessionData.success ? 10 : 5)\n      },\n      sessions: [...studyData.sessions, session],\n      daily: {\n        ...studyData.daily,\n        todayMinutes: studyData.daily.todayMinutes + (sessionData.duration || 0),\n        todayProblems: studyData.daily.todayProblems + (sessionData.problems || 0),\n        lastDate: new Date().toDateString()\n      }\n    };\n\n    // Update streak\n    const today = new Date().toDateString();\n    const lastActiveDate = studyData.stats.lastActive ? new Date(studyData.stats.lastActive).toDateString() : null;\n    \n    if (lastActiveDate !== today) {\n      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toDateString();\n      if (lastActiveDate === yesterday) {\n        updatedData.stats.streak = studyData.stats.streak + 1;\n      } else if (!lastActiveDate) {\n        updatedData.stats.streak = 1;\n      } else {\n        updatedData.stats.streak = 1; // Reset if gap > 1 day\n      }\n    }\n\n    await saveStudyData(updatedData);\n  }, [studyData, saveStudyData]);\n\n  // Check and award achievements\n  const checkAchievements = useCallback(async () => {\n    const newAchievements = [];\n    const currentAchievements = studyData.achievements.map(a => a.id);\n\n    const achievementChecks = [\n      {\n        id: 'first_problem',\n        name: 'First Steps',\n        description: 'Solved your first problem',\n        icon: '\ud83c\udfaf',\n        condition: () => studyData.stats.problemsSolved >= 1\n      },\n      {\n        id: 'problem_solver',\n        name: 'Problem Solver',\n        description: 'Solved 10 problems',\n        icon: '\ud83e\uddee',\n        condition: () => studyData.stats.problemsSolved >= 10\n      },\n      {\n        id: 'streak_week',\n        name: 'Weekly Warrior',\n        description: 'Maintained 7-day streak',\n        icon: '\ud83d\udd25',\n        condition: () => studyData.stats.streak >= 7\n      },\n      {\n        id: 'study_hour',\n        name: 'Dedicated Learner',\n        description: 'Completed 1 hour of study',\n        icon: '\u23f1\ufe0f',\n        condition: () => studyData.stats.totalMinutes >= 60\n      }\n    ];\n\n    for (const achievement of achievementChecks) {\n      if (!currentAchievements.includes(achievement.id) && achievement.condition()) {\n        newAchievements.push({\n          ...achievement,\n          earned: Date.now()\n        });\n      }\n    }\n\n    if (newAchievements.length > 0) {\n      const updatedData = {\n        ...studyData,\n        achievements: [...studyData.achievements, ...newAchievements]\n      };\n      await saveStudyData(updatedData);\n      return newAchievements;\n    }\n\n    return [];\n  }, [studyData, saveStudyData]);\n\n  // Reset daily progress\n  const resetDailyProgress = useCallback(() => {\n    const today = new Date().toDateString();\n    if (studyData.daily.lastDate !== today) {\n      const updatedData = {\n        ...studyData,\n        daily: {\n          ...studyData.daily,\n          todayMinutes: 0,\n          todayProblems: 0,\n          lastDate: today\n        }\n      };\n      saveStudyData(updatedData);\n    }\n  }, [studyData, saveStudyData]);\n\n  // Format study time helper\n  const formatStudyTime = (minutes) => {\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes > 0 ? `${hours}h ${remainingMinutes}m` : `${hours}h`;\n  };\n\n  // Get current study plan based on progress\n  const getStudyPlan = useCallback(() => {\n    const topics = Object.entries(studyData.progress)\n      .map(([topic, progress]) => ({\n        id: topic,\n        title: topic.charAt(0).toUpperCase() + topic.slice(1),\n        progress: Math.min(100, progress),\n        difficulty: progress < 30 ? 'easy' : progress < 70 ? 'medium' : 'hard',\n        isActive: false\n      }))\n      .sort((a, b) => a.progress - b.progress);\n\n    // Mark the topic with lowest progress as active\n    if (topics.length > 0) {\n      topics[0].isActive = true;\n    }\n\n    return topics.slice(0, 6); // Show top 6 topics\n  }, [studyData.progress]);\n\n  // Get recent activity\n  const getRecentActivity = useCallback(() => {\n    return studyData.sessions\n      .slice(-5)\n      .reverse()\n      .map(session => ({\n        id: session.id,\n        type: session.success ? 'success' : 'practice',\n        title: session.topic.charAt(0).toUpperCase() + session.topic.slice(1),\n        subtitle: `${session.problems || 0} problems \u2022 ${session.duration || 0} min`,\n        time: formatTimeAgo(session.timestamp),\n        icon: session.success ? '\u2705' : '\ud83d\udd04'\n      }));\n  }, [studyData.sessions]);\n\n  // Format time ago helper\n  const formatTimeAgo = (timestamp) => {\n    const diff = Date.now() - timestamp;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n    if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n    if (minutes > 0) return `${minutes} min ago`;\n    return 'Just now';\n  };\n\n  // Load data on mount\n  useEffect(() => {\n    loadStudyData();\n  }, [loadStudyData]);\n\n  // Reset daily progress on new day\n  useEffect(() => {\n    resetDailyProgress();\n  }, [resetDailyProgress]);\n\n  // Listen for DSA problem completions from main extension\n  useEffect(() => {\n    const handleProblemSolved = (event) => {\n      const { problem, success, timeSpent, difficulty } = event.detail;\n      recordSession({\n        type: 'dsa',\n        topic: problem.category || 'arrays',\n        duration: Math.floor(timeSpent / 60000), // Convert ms to minutes\n        problems: 1,\n        success,\n        difficulty\n      });\n    };\n\n    document.addEventListener('zeroTrace:problemSolved', handleProblemSolved);\n    return () => document.removeEventListener('zeroTrace:problemSolved', handleProblemSolved);\n  }, [recordSession]);\n\n  return {\n    studyData,\n    isLoading,\n    hasRealData,\n    recordSession,\n    checkAchievements,\n    getStudyPlan,\n    getRecentActivity,\n    loadStudyData,\n    formatStudyTime\n  };\n};\n\nexport default useStudyData;"
    },
    {
      "type": "writeFile",
      "path": "src/components/StudyDashboard.jsx",
      "ifExists": "overwrite",
      "description": "Updated StudyDashboard with real-time data and zeroTrace UI styling",
      "content": "import React, { useState, useEffect } from 'react';\nimport useStudyData from '../hooks/useStudyData';\nimport './StudyDashboard.css';\n\nconst StudyDashboard = () => {\n  const {\n    studyData,\n    isLoading,\n    hasRealData,\n    recordSession,\n    checkAchievements,\n    getStudyPlan,\n    getRecentActivity\n  } = useStudyData();\n\n  const [showDemo, setShowDemo] = useState(false);\n  const [studyPlans, setStudyPlans] = useState([]);\n  const [recentActivity, setRecentActivity] = useState([]);\n\n  useEffect(() => {\n    if (!isLoading) {\n      setStudyPlans(getStudyPlan());\n      setRecentActivity(getRecentActivity());\n    }\n  }, [studyData, isLoading, getStudyPlan, getRecentActivity]);\n\n  const CircularProgress = ({ percentage, size = 100 }) => {\n    const radius = (size - 12) / 2;\n    const circumference = radius * 2 * Math.PI;\n    const strokeDasharray = `${percentage * circumference / 100} ${circumference}`;\n\n    return (\n      <div className=\"circular-progress\" style={{ width: size, height: size }}>\n        <svg className=\"progress-ring\" width={size} height={size}>\n          <circle\n            className=\"progress-ring-background\"\n            stroke=\"rgba(139, 92, 246, 0.2)\"\n            strokeWidth=\"6\"\n            fill=\"transparent\"\n            r={radius}\n            cx={size/2}\n            cy={size/2}\n          />\n          <circle\n            className=\"progress-ring-fill\"\n            stroke=\"#8b5cf6\"\n            strokeWidth=\"6\"\n            fill=\"transparent\"\n            r={radius}\n            cx={size/2}\n            cy={size/2}\n            strokeDasharray={strokeDasharray}\n            strokeLinecap=\"round\"\n            transform={`rotate(-90 ${size/2} ${size/2})`}\n          />\n        </svg>\n        <div className=\"progress-center\">\n          <span className=\"progress-percentage\">{percentage}%</span>\n          <span className=\"progress-label\">Goal</span>\n        </div>\n      </div>\n    );\n  };\n\n  const dailyProgress = Math.min(100, (studyData.daily.todayMinutes / studyData.daily.dailyGoal) * 100);\n\n  if (isLoading) {\n    return (\n      <div className=\"study-dashboard loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading your study progress...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"study-dashboard\">\n      {/* Data Source Indicator */}\n      {!hasRealData && (\n        <div className=\"demo-banner\">\n          <span className=\"demo-icon\">\ud83d\udcca</span>\n          <span className=\"demo-text\">Demo data shown \u2022 Start solving problems to see your real progress!</span>\n        </div>\n      )}\n\n      {/* Header Section */}\n      <div className=\"dashboard-header\">\n        <div className=\"welcome-section\">\n          <h1 className=\"welcome-title\">\n            {hasRealData ? 'Welcome back!' : 'Ready to start coding?'} \ud83d\udc4b\n          </h1>\n          <p className=\"welcome-subtitle\">\n            {hasRealData \n              ? 'Continue your coding journey' \n              : 'Begin your DSA mastery journey with zeroTrace AI'\n            }\n          </p>\n        </div>\n        \n        <div className=\"stats-grid\">\n          <div className=\"stat-card\">\n            <div className=\"stat-icon\">\ud83d\udd25</div>\n            <div className=\"stat-content\">\n              <span className=\"stat-number\">{studyData.stats.streak}</span>\n              <span className=\"stat-label\">Day Streak</span>\n            </div>\n          </div>\n          <div className=\"stat-card\">\n            <div className=\"stat-icon\">\ud83e\uddee</div>\n            <div className=\"stat-content\">\n              <span className=\"stat-number\">{studyData.stats.problemsSolved}</span>\n              <span className=\"stat-label\">Problems</span>\n            </div>\n          </div>\n          <div className=\"stat-card\">\n            <div className=\"stat-icon\">\u23f1\ufe0f</div>\n            <div className=\"stat-content\">\n              <span className=\"stat-number\">{studyData.stats.studyTime}</span>\n              <span className=\"stat-label\">Study Time</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Daily Progress */}\n      <div className=\"progress-section\">\n        <h2>\ud83d\udcc8 Today's Progress</h2>\n        \n        <div className=\"progress-content\">\n          <CircularProgress percentage={Math.round(dailyProgress)} />\n          \n          <div className=\"progress-stats\">\n            <div className=\"progress-item\">\n              <span className=\"progress-label\">Study Time</span>\n              <span className=\"progress-value\">\n                {studyData.daily.todayMinutes}/{studyData.daily.dailyGoal} min\n              </span>\n            </div>\n            <div className=\"progress-item\">\n              <span className=\"progress-label\">Problems Solved</span>\n              <span className=\"progress-value\">\n                {studyData.daily.todayProblems}/{studyData.daily.problemGoal}\n              </span>\n            </div>\n            <div className=\"progress-item\">\n              <span className=\"progress-label\">Status</span>\n              <span className=\"progress-value status\">\n                {dailyProgress >= 100 ? '\ud83c\udfaf Goal Complete!' : \n                 dailyProgress >= 50 ? '\ud83d\udcc8 On Track' : '\u26a1 Getting Started'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Study Topics */}\n      <div className=\"topics-section\">\n        <h2>\ud83d\udcda DSA Topics Progress</h2>\n        \n        <div className=\"topics-grid\">\n          {studyPlans.map(topic => (\n            <div key={topic.id} className={`topic-card ${topic.isActive ? 'active' : ''}`}>\n              <div className=\"topic-header\">\n                <span className=\"topic-title\">{topic.title}</span>\n                <span className={`difficulty-badge ${topic.difficulty}`}>\n                  {topic.difficulty}\n                </span>\n              </div>\n              \n              <div className=\"topic-progress\">\n                <div className=\"progress-bar\">\n                  <div \n                    className=\"progress-fill\" \n                    style={{ width: `${topic.progress}%` }}\n                  ></div>\n                </div>\n                <span className=\"progress-text\">{topic.progress}%</span>\n              </div>\n              \n              {topic.isActive && (\n                <div className=\"topic-badge\">\ud83c\udfaf Focus Area</div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"actions-section\">\n        <h2>\u26a1 Quick Actions</h2>\n        \n        <div className=\"actions-grid\">\n          <button className=\"action-button primary\" onClick={() => {\n            // Integrate with existing DSA solver\n            document.dispatchEvent(new CustomEvent('zeroTrace:switchMode', { detail: { mode: 'dsa' } }));\n          }}>\n            <span className=\"action-icon\">\ud83e\uddee</span>\n            <div className=\"action-content\">\n              <span className=\"action-title\">Solve Problems</span>\n              <span className=\"action-subtitle\">Practice DSA algorithms</span>\n            </div>\n          </button>\n          \n          <button className=\"action-button\" onClick={() => {\n            document.dispatchEvent(new CustomEvent('zeroTrace:switchMode', { detail: { mode: 'chat' } }));\n          }}>\n            <span className=\"action-icon\">\ud83d\udcac</span>\n            <div className=\"action-content\">\n              <span className=\"action-title\">Ask AI</span>\n              <span className=\"action-subtitle\">Get help with concepts</span>\n            </div>\n          </button>\n          \n          <button className=\"action-button\" onClick={() => {\n            document.dispatchEvent(new CustomEvent('zeroTrace:switchMode', { detail: { mode: 'code' } }));\n          }}>\n            <span className=\"action-icon\">\ud83d\udcbb</span>\n            <div className=\"action-content\">\n              <span className=\"action-title\">Code Review</span>\n              <span className=\"action-subtitle\">Debug and optimize</span>\n            </div>\n          </button>\n          \n          <button className=\"action-button\" onClick={() => {\n            // Show study timer (could integrate with existing timer functionality)\n            alert('Study timer feature coming soon!');\n          }}>\n            <span className=\"action-icon\">\u23f2\ufe0f</span>\n            <div className=\"action-content\">\n              <span className=\"action-title\">Study Timer</span>\n              <span className=\"action-subtitle\">Focused study sessions</span>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      {recentActivity.length > 0 && (\n        <div className=\"activity-section\">\n          <h2>\ud83d\udcdd Recent Activity</h2>\n          \n          <div className=\"activity-feed\">\n            {recentActivity.map(activity => (\n              <div key={activity.id} className=\"activity-item\">\n                <div className=\"activity-icon\">{activity.icon}</div>\n                <div className=\"activity-content\">\n                  <div className=\"activity-main\">\n                    <span className=\"activity-title\">{activity.title}</span>\n                    <span className=\"activity-time\">{activity.time}</span>\n                  </div>\n                  <span className=\"activity-subtitle\">{activity.subtitle}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Achievements */}\n      {studyData.achievements.length > 0 && (\n        <div className=\"achievements-section\">\n          <h2>\ud83c\udfc6 Recent Achievements</h2>\n          \n          <div className=\"achievements-grid\">\n            {studyData.achievements.slice(-3).map(achievement => (\n              <div key={achievement.id} className=\"achievement-card\">\n                <div className=\"achievement-icon\">{achievement.icon}</div>\n                <div className=\"achievement-content\">\n                  <span className=\"achievement-name\">{achievement.name}</span>\n                  <span className=\"achievement-desc\">{achievement.description}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Getting Started for New Users */}\n      {!hasRealData && (\n        <div className=\"getting-started-section\">\n          <h2>\ud83d\ude80 Get Started</h2>\n          <div className=\"getting-started-content\">\n            <p>Start solving DSA problems to unlock your personalized study dashboard!</p>\n            <button \n              className=\"start-button\"\n              onClick={() => {\n                document.dispatchEvent(new CustomEvent('zeroTrace:switchMode', { detail: { mode: 'dsa' } }));\n              }}\n            >\n              Solve Your First Problem \ud83c\udfaf\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StudyDashboard;"
    },
    {
      "type": "writeFile",
      "path": "src/components/StudyDashboard.css",
      "ifExists": "overwrite",
      "description": "Updated styles to match zeroTrace UI aesthetics exactly",
      "content": "/* Study Dashboard - zeroTrace AI Matching Styles */\n\n.study-dashboard {\n  background: #0b0f14;\n  color: #e9edf1;\n  padding: 20px;\n  min-height: 100vh;\n  font-family: system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;\n  overflow-y: auto;\n}\n\n.study-dashboard.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 400px;\n}\n\n.loading-spinner {\n  width: 32px;\n  height: 32px;\n  border: 3px solid #20303f;\n  border-top: 3px solid #8b5cf6;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 16px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Demo Banner */\n.demo-banner {\n  background: rgba(139, 92, 246, 0.1);\n  border: 1px solid rgba(139, 92, 246, 0.3);\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin-bottom: 24px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.demo-icon {\n  font-size: 16px;\n}\n\n.demo-text {\n  color: #c4b5fd;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n/* Header Section */\n.dashboard-header {\n  margin-bottom: 32px;\n}\n\n.welcome-section {\n  text-align: center;\n  margin-bottom: 24px;\n}\n\n.welcome-title {\n  font-size: 24px;\n  font-weight: 700;\n  margin: 0 0 8px 0;\n  color: #ffffff;\n}\n\n.welcome-subtitle {\n  font-size: 16px;\n  color: #a0aec0;\n  margin: 0;\n}\n\n/* Stats Grid */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  gap: 16px;\n}\n\n.stat-card {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n  background: #143044;\n  border-color: #2a4155;\n  transform: translateY(-1px);\n}\n\n.stat-icon {\n  font-size: 20px;\n  opacity: 0.9;\n}\n\n.stat-content {\n  display: flex;\n  flex-direction: column;\n}\n\n.stat-number {\n  font-size: 18px;\n  font-weight: 700;\n  color: #ffffff;\n  line-height: 1;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #a0aec0;\n  margin-top: 2px;\n}\n\n/* Section Titles */\nh2 {\n  font-size: 16px;\n  font-weight: 600;\n  margin: 0 0 16px 0;\n  color: #ffffff;\n  padding-bottom: 8px;\n  border-bottom: 1px solid #20303f;\n}\n\n/* Progress Section */\n.progress-section {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 24px;\n}\n\n.progress-content {\n  display: flex;\n  align-items: center;\n  gap: 24px;\n}\n\n.circular-progress {\n  position: relative;\n  flex-shrink: 0;\n}\n\n.progress-ring {\n  transform: rotate(-90deg);\n}\n\n.progress-ring-fill {\n  transition: stroke-dasharray 0.5s ease;\n}\n\n.progress-center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n}\n\n.progress-percentage {\n  display: block;\n  font-size: 16px;\n  font-weight: 700;\n  color: #8b5cf6;\n}\n\n.progress-label {\n  display: block;\n  font-size: 10px;\n  color: #a0aec0;\n  margin-top: 2px;\n}\n\n.progress-stats {\n  flex: 1;\n}\n\n.progress-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  border-bottom: 1px solid #20303f;\n}\n\n.progress-item:last-child {\n  border-bottom: none;\n}\n\n.progress-item .progress-label {\n  color: #a0aec0;\n  font-size: 14px;\n}\n\n.progress-item .progress-value {\n  color: #e9edf1;\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.progress-item .progress-value.status {\n  color: #8b5cf6;\n}\n\n/* Topics Section */\n.topics-section {\n  margin-bottom: 24px;\n}\n\n.topics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 12px;\n}\n\n.topic-card {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 16px;\n  transition: all 0.2s ease;\n  position: relative;\n}\n\n.topic-card:hover {\n  background: #143044;\n  border-color: #2a4155;\n}\n\n.topic-card.active {\n  border-color: #8b5cf6;\n  background: rgba(139, 92, 246, 0.05);\n}\n\n.topic-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n.topic-title {\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 14px;\n  text-transform: capitalize;\n}\n\n.difficulty-badge {\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 10px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n\n.difficulty-badge.easy {\n  background: rgba(34, 197, 94, 0.2);\n  color: #22c55e;\n}\n\n.difficulty-badge.medium {\n  background: rgba(251, 191, 36, 0.2);\n  color: #fbbf24;\n}\n\n.difficulty-badge.hard {\n  background: rgba(239, 68, 68, 0.2);\n  color: #ef4444;\n}\n\n.topic-progress {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n}\n\n.progress-bar {\n  flex: 1;\n  height: 6px;\n  background: #20303f;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: #8b5cf6;\n  border-radius: 3px;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  color: #8b5cf6;\n  font-size: 12px;\n  font-weight: 500;\n  min-width: 32px;\n  text-align: right;\n}\n\n.topic-badge {\n  background: rgba(139, 92, 246, 0.2);\n  color: #8b5cf6;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 10px;\n  font-weight: 500;\n  text-align: center;\n}\n\n/* Actions Section */\n.actions-section {\n  margin-bottom: 24px;\n}\n\n.actions-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 12px;\n}\n\n.action-button {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  color: #e9edf1;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  text-align: left;\n}\n\n.action-button:hover {\n  background: #143044;\n  border-color: #2a4155;\n  transform: translateY(-1px);\n}\n\n.action-button.primary {\n  background: rgba(139, 92, 246, 0.1);\n  border-color: #8b5cf6;\n}\n\n.action-button.primary:hover {\n  background: rgba(139, 92, 246, 0.2);\n}\n\n.action-icon {\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.action-content {\n  flex: 1;\n}\n\n.action-title {\n  display: block;\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 14px;\n  margin-bottom: 2px;\n}\n\n.action-subtitle {\n  display: block;\n  font-size: 12px;\n  color: #a0aec0;\n}\n\n/* Activity Section */\n.activity-section {\n  margin-bottom: 24px;\n}\n\n.activity-feed {\n  background: #10161d;\n  border: 1px solid #20303f;\n  border-radius: 8px;\n  padding: 16px;\n}\n\n.activity-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 0;\n  border-bottom: 1px solid #20303f;\n}\n\n.activity-item:last-child {\n  border-bottom: none;\n}\n\n.activity-item .activity-icon {\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #20303f;\n  border-radius: 6px;\n  font-size: 14px;\n  flex-shrink: 0;\n}\n\n.activity-content {\n  flex: 1;\n}\n\n.activity-main {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2px;\n}\n\n.activity-title {\n  font-weight: 600;\n  color: #ffffff;\n  font-size: 14px;\n}\n\n.activity-time {\n  color: #a0aec0;\n  font-size: 12px;\n}\n\n.activity-subtitle {\n  color: #a0aec0;\n  font-size: 12px;\n}\n\n/* Achievements Section */\n.achievements-section {\n  margin-bottom: 24px;\n}\n\n.achievements-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 12px;\n}\n\n.achievement-card {\n  background: rgba(139, 92, 246, 0.1);\n  border: 1px solid rgba(139, 92, 246, 0.3);\n  border-radius: 8px;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.achievement-card .achievement-icon {\n  font-size: 20px;\n  flex-shrink: 0;\n}\n\n.achievement-content {\n  flex: 1;\n}\n\n.achievement-name {\n  display: block;\n  font-weight: 600;\n  color: #8b5cf6;\n  font-size: 14px;\n  margin-bottom: 2px;\n}\n\n.achievement-desc {\n  display: block;\n  font-size: 12px;\n  color: #a0aec0;\n}\n\n/* Getting Started Section */\n.getting-started-section {\n  background: rgba(139, 92, 246, 0.05);\n  border: 1px solid rgba(139, 92, 246, 0.2);\n  border-radius: 8px;\n  padding: 24px;\n  text-align: center;\n}\n\n.getting-started-content p {\n  color: #a0aec0;\n  margin: 0 0 16px 0;\n  font-size: 16px;\n}\n\n.start-button {\n  background: #8b5cf6;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 12px 24px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.start-button:hover {\n  background: #7c3aed;\n  transform: translateY(-1px);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .study-dashboard {\n    padding: 16px;\n  }\n  \n  .progress-content {\n    flex-direction: column;\n    text-align: center;\n    gap: 16px;\n  }\n  \n  .stats-grid,\n  .topics-grid,\n  .actions-grid,\n  .achievements-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .activity-main {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 4px;\n  }\n}\n\n@media (max-width: 480px) {\n  .welcome-title {\n    font-size: 20px;\n  }\n  \n  .stat-card,\n  .topic-card,\n  .action-button {\n    padding: 12px;\n  }\n}\n\n/* Smooth transitions for real-time updates */\n.stat-number,\n.progress-percentage,\n.progress-fill,\n.progress-value {\n  transition: all 0.3s ease;\n}\n\n/* Highlight new achievements */\n.achievement-card.new {\n  animation: achievementGlow 2s ease-in-out;\n}\n\n@keyframes achievementGlow {\n  0% { box-shadow: 0 0 0 rgba(139, 92, 246, 0.4); }\n  50% { box-shadow: 0 0 20px rgba(139, 92, 246, 0.4); }\n  100% { box-shadow: 0 0 0 rgba(139, 92, 246, 0.4); }\n}\n\n/* Loading states */\n.stat-card.loading,\n.topic-card.loading,\n.activity-item.loading {\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.stat-card.loading::after,\n.topic-card.loading::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(139, 92, 246, 0.1), transparent);\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% { transform: translateX(-100%); }\n  100% { transform: translateX(100%); }\n}"
    },
    {
      "type": "updateFile",
      "path": "src/utils/dsaIntegration.js",
      "action": "create",
      "description": "Integration utility to connect DSA solver with study tracking",
      "content": "// Integration utility for connecting DSA solver with study tracking\n\n// Listen for DSA problem completions and record study sessions\nexport const initializeStudyTracking = () => {\n  // Listen for problem solving events from the main extension\n  document.addEventListener('dsaProblemCompleted', handleProblemCompletion);\n  document.addEventListener('studySessionStarted', handleSessionStart);\n  document.addEventListener('studySessionEnded', handleSessionEnd);\n  \n  console.log('[Study Tracking] Initialized DSA integration');\n};\n\n// Handle DSA problem completion\nconst handleProblemCompletion = (event) => {\n  const { problem, success, timeSpent, difficulty, category } = event.detail;\n  \n  // Dispatch event for study dashboard to record\n  document.dispatchEvent(new CustomEvent('zeroTrace:problemSolved', {\n    detail: {\n      problem: {\n        title: problem.title || 'DSA Problem',\n        category: category || 'arrays'\n      },\n      success,\n      timeSpent,\n      difficulty: difficulty || 'medium'\n    }\n  }));\n  \n  console.log('[Study Tracking] Recorded problem completion:', { success, category, timeSpent });\n};\n\n// Handle study session start\nconst handleSessionStart = (event) => {\n  const { mode, topic } = event.detail;\n  \n  // Store session start time\n  sessionStorage.setItem('studySessionStart', JSON.stringify({\n    startTime: Date.now(),\n    mode,\n    topic\n  }));\n  \n  console.log('[Study Tracking] Session started:', { mode, topic });\n};\n\n// Handle study session end\nconst handleSessionEnd = (event) => {\n  const sessionData = sessionStorage.getItem('studySessionStart');\n  if (sessionData) {\n    const session = JSON.parse(sessionData);\n    const duration = Math.floor((Date.now() - session.startTime) / (1000 * 60)); // minutes\n    \n    // Dispatch session completion event\n    document.dispatchEvent(new CustomEvent('zeroTrace:sessionCompleted', {\n      detail: {\n        type: session.mode,\n        topic: session.topic,\n        duration,\n        ...event.detail\n      }\n    }));\n    \n    sessionStorage.removeItem('studySessionStart');\n    console.log('[Study Tracking] Session completed:', { duration, topic: session.topic });\n  }\n};\n\n// Trigger DSA solver mode\nexport const openDSASolver = () => {\n  // Find and click DSA solver mode button\n  const dsaButton = document.querySelector('[data-mode=\"dsa\"]') || \n                   document.querySelector('[aria-label=\"DSA Solver\"]');\n  \n  if (dsaButton) {\n    dsaButton.click();\n    \n    // Dispatch session start event\n    document.dispatchEvent(new CustomEvent('studySessionStarted', {\n      detail: {\n        mode: 'dsa',\n        topic: 'mixed'\n      }\n    }));\n  } else {\n    console.warn('[Study Tracking] DSA solver button not found');\n  }\n};\n\n// Get current study statistics\nexport const getCurrentStats = async () => {\n  try {\n    const result = await new Promise(resolve => {\n      chrome.storage.local.get(['zt_study_stats'], resolve);\n    });\n    \n    return result.zt_study_stats || {\n      problemsSolved: 0,\n      totalMinutes: 0,\n      streak: 0\n    };\n  } catch (error) {\n    console.error('[Study Tracking] Error getting stats:', error);\n    return null;\n  }\n};\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeStudyTracking);\n} else {\n  initializeStudyTracking();\n}"
    },
    {
      "type": "updateFile",
      "path": "src/App.jsx",
      "action": "add_import",
      "description": "Import study tracking integration",
      "content": "import './utils/dsaIntegration.js';"
    }
  ]
}